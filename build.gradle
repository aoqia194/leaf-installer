plugins {
	id 'java'
	id 'maven-publish'
	id "com.gradleup.shadow" version "8.3.0"
	id "com.diffplug.spotless" version "6.20.0"
	id "de.undercouch.download" version "5.6.0"
	id "me.modmuss50.remotesign" version "0.4.0"
}

version = '1.0.0'

def ENV = System.getenv()
version = version + (ENV.GITHUB_ACTIONS ? "" : "+local")

repositories {
	maven {
		name = 'Fabric'
		url = 'https://maven.fabricmc.net/'
	}
    mavenCentral()
}

dependencies {
	implementation "com.fasterxml.jackson.core:jackson-databind:2.18.2"
	testImplementation "junit:junit:4.13.2"
}

base {
	archivesName = "leaf-installer"
}

java {
	sourceCompatibility = JavaVersion.VERSION_17
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"
    it.options.release = 17
}

shadowJar {
	manifest {
		attributes 'Implementation-Title': 'LeafInstaller',
				'Implementation-Version': project.version,
				'Main-Class': 'dev.aoqia.installer.Main'
	}

	minimize()
	archiveClassifier.set(null)
	exclude('icon.ico')
}

import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

jar {
	enabled = false

	manifest {
		attributes('Enable-Native-Access': 'ALL-UNNAMED')
	}
}

if (ENV.SIGNING_SERVER) {
	remoteSign {
		requestUrl = ENV.SIGNING_SERVER
		pgpAuthKey = ENV.SIGNING_PGP_KEY
		jarAuthKey = ENV.SIGNING_JAR_KEY

		sign (shadowJar)

		afterEvaluate {
			sign publishing.publications.maven
		}
	}
}

spotless {
	java {
		licenseHeaderFile(rootProject.file("HEADER"))
	}
}

publishing {
	publications {
		maven(MavenPublication) {
			groupId project.group
			artifactId base.archivesName.get()
			version project.version

			if (ENV.SIGNING_SERVER) {
				artifact (signShadowJar) {
					classifier null
				}
			} else {
				artifact (shadowJar) {
					classifier null
				}
			}
		}
	}
	repositories {
		maven {
			if (ENV.MAVEN_URL) {
				url ENV.MAVEN_URL
				credentials {
					username ENV.MAVEN_USERNAME
					password ENV.MAVEN_PASSWORD
				}
			}
		}
	}
}

// A task to ensure that the version being released has not already been released.
tasks.register('checkVersion') {
	doFirst {
		def xml = new URL("https://repo.maven.apache.org/maven2/dev/aoqia/leaf-installer/maven-metadata.xml").text
		def metadata = new groovy.xml.XmlSlurper().parseText(xml)
		def versions = metadata.versioning.versions.version*.text();
		if (versions.contains(version)) {
			throw new RuntimeException("${version} has already been released!")
		}
	}
}

publish.mustRunAfter checkVersion

class FileOutput extends DefaultTask {
	@OutputFile
	File output
}
